Python:

class Solution:
    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:
        groups = defaultdict(list)
        for row in range(len(nums) - 1, -1, -1):
            for col in range(len(nums[row])):
                diagonal = row + col
                groups[diagonal].append(nums[row][col])
        res = []
        curr = 0

        while curr in groups:
            res.extend(groups[curr])
            curr += 1
        return res

-------------------------------------------------------------------------

Java:

class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        Map<Integer, List<Integer>> map = new HashMap();
        int n = 0;
        for(int row=nums.size()-1; row>=0; row--){
            for(int col=0; col<nums.get(row).size(); col++){
                int diagonal = row + col;
                List<Integer> diagonalList = map.getOrDefault(diagonal, new ArrayList());
                diagonalList.add(nums.get(row).get(col));
                map.put(diagonal, diagonalList);
                n++;
            }
        }
        int[] res = new int[n];
        int i=0;
        int curr = 0;
        while(map.containsKey(curr)){
            for(int num : map.get(curr)){
                res[i++] = num;
            }
            curr++;
        }
        return res;
    }
}
