Java:

class Solution {
    public int countPalindromicSubsequence(String s) {
        Integer[] first = new Integer[26];
        Integer[] last = new Integer[26];

        for(int i=0; i<s.length(); i++){
            int curr = s.charAt(i) - 'a';
            if(first[curr] == null){
                first[curr] = i;
            }
            last[curr] = i;
        }
        int res = 0;
        for(int i = 0; i < 26; i++) {
            if (first[i] == null) continue; 
            boolean[] seen = new boolean[26];
            for (int j = first[i] + 1; j < last[i]; j++) {
                int charIndex = s.charAt(j) - 'a';
                if (!seen[charIndex]) {
                    seen[charIndex] = true;
                    res++;
                }
            }
        }
        return res;
    }
}

-----------------------------------

Python:

class Solution:
    def countPalindromicSubsequence(self, s: str) -> int:
        first = [-1] * 26
        last = [-1] * 26
        for i in range(len(s)):
            curr = ord(s[i]) - ord("a")
            if first[curr] == -1:
                first[curr] = i
            last[curr] = i
        res = 0
        for i in range(26):
            if first[curr] == -1:
                continue
            between = set()
            for j in range(first[i]+1, last[i]):
                between.add(s[j])
            res += len(between)
        return res
     
